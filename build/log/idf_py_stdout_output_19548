[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.3.1\my_project\mpu_test\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Espressif/frameworks/esp-idf-v5.3.1/my_project/mpu_test/build/bootloader/bootloader.bin"
Bootloader binary size 0x6880 bytes. 0x780 bytes (7%) free.
[2/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/mpu_test.c.obj
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/mpu.c.obj
[4/9] Linking C static library esp-idf\main\libmain.a
[5/9] Generating ld/sections.ld
[6/9] Linking CXX executable mpu_test.elf
[7/9] Generating binary image from built executable
esptool.py v4.9.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Espressif/frameworks/esp-idf-v5.3.1/my_project/mpu_test/build/mpu_test.bin
[8/9] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.3.1\my_project\mpu_test\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.3_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.3.1/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Espressif/frameworks/esp-idf-v5.3.1/my_project/mpu_test/build/partition_table/partition-table.bin C:/Espressif/frameworks/esp-idf-v5.3.1/my_project/mpu_test/build/mpu_test.bin"
mpu_test.bin binary size 0x31740 bytes. Smallest app partition is 0x100000 bytes. 0xce8c0 bytes (81%) free.
[8/9] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.3.1\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.3.1 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.3_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.3.1/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKIesptool.py --chip esp32 -p COM4 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 mpu_test.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.9.0
Serial port COM4
Connecting......
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 1c:69:20:ca:90:9c
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00041fff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 26752 bytes to 16361...
Writing at 0x00001000... (100 %)
Wrote 26752 bytes (16361 compressed) at 0x00001000 in 0.8 seconds (effective 253.9 kbit/s)...
Hash of data verified.
Compressed 202560 bytes to 108241...
Writing at 0x00010000... (14 %)
Writing at 0x0001ceed... (28 %)
Writing at 0x00022abf... (42 %)
Writing at 0x00028935... (57 %)
Writing at 0x0002f84a... (71 %)
Writing at 0x00037907... (85 %)
Writing at 0x0003d9e6... (100 %)
Wrote 202560 bytes (108241 compressed) at 0x00010000 in 2.9 seconds (effective 554.9 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 351.4 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
NG_DIRECTORY=C:/Espressif/frameworks/esp-idf-v5.3.1/my_project/mpu_test/build -P C:/Espressif/frameworks/esp-idf-v5.3.1/components/esptool_py/run_serial_tool.cmake"
